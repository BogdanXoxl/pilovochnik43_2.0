### This file was generated by Nexus Schema
### Do not make changes to this file directly

type Account {
  access_token: String
  expires_at: Int
  id: String
  id_token: String
  provider: String
  providerAccountId: String
  refresh_token: String
  scope: String
  session_state: String
  token_type: String
  type: String
  user: User
  userId: String
}

type Category {
  id: String
  seo_description: String
  seo_title: String
  title: String
}

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

type DeliveryType {
  howLong: String
  id: String
  price: Float
  title: String
}

type Image {
  createdAt: DateTime
  id: String
  link: String
  type: ImageType
  updatedAt: DateTime
}

enum ImageType {
  PHOTO
  VIDEO
}

type Mutation {
  createReview(productId: ID!, rate: Int!, text: String!): MutationResponse
}

type MutationResponse {
  message: String
  response: Review
  success: Boolean
}

type Order {
  createdAt: DateTime
  delivery: DeliveryType
  deliveryTypeId: String
  id: String
  products: [ProductOrder]
  status: Status
  summary: Float
  updatedAt: DateTime
  user: User
}

type Product {
  category: Category
  createdAt: DateTime
  delivery: [DeliveryType]
  description: String
  discount: Int
  id: String
  images: [Image]
  orders_count: Int
  price: Float
  rating: Float
  reviews: [Review]
  reviews_count: Int
  seo_description: String
  seo_title: String
  sizes: [String]
  slug: String
  tags: [Tag]
  title: String
  updatedAt: DateTime
}

type ProductOrder {
  amount: Int
  id: String
  order: Order
  price: Float
  product: Product
}

input ProductsFilterType {
  field: SortOrderField!
  sort: SortOrder
}

type Query {
  product(productId: String!): Product
  products(
    category_id: String
    discount: Boolean
    filters: ProductsFilterType
    tags: [String]
  ): [Product!]
  tags(sort: SortOrder): [Tag!]
}

type Review {
  createdAt: DateTime
  id: String
  rate: Int
  text: String
  updatedAt: DateTime
  user: User
}

type Session {
  expires: DateTime
  id: String
  sessionToken: String
  user: User
  userId: String
}

enum SortOrder {
  asc
  desc
}

enum SortOrderField {
  orders
  price
}

type Status {
  createdAt: DateTime
  id: String
  message: String
  orders: [Order]
  title: String
  updatedAt: DateTime
}

type Tag {
  createdAt: DateTime
  id: String
  title: String
  updatedAt: DateTime
}

type User {
  accounts: [Account]
  email: String
  emailVerified: DateTime
  id: String
  image: String
  name: String
  orders: [Order]
  reviews: [Review]
  sessions: [Session]
}
