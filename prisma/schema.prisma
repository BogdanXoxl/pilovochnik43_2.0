generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  reviews       Review[]
  orders        Order[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum ImageType {
  VIDEO
  PHOTO
}

model Image {
  id        String    @id @default(cuid())
  link      String
  type      ImageType @default(PHOTO)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  product   Product?  @relation(fields: [productId], references: [id])
  productId String?
}

model Tag {
  id        String    @id @default(cuid())
  title     String    @unique
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  products  Product[]
}

model Category {
  id              String    @id @default(cuid())
  title           String    @unique
  seo_title       String?
  seo_description String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  products        Product[]
}

model Status {
  id        String   @id @default(cuid())
  title     String   @unique
  message   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  orders    Order[]
}

model DeliveryType {
  id       String    @id @default(cuid())
  title    String    @unique
  howLong  String
  price    Float?
  products Product[]
  orders   Order[]
}

model Product {
  id              String   @id @default(cuid())
  title           String
  slug            String   @unique
  description     String
  seo_title       String?
  seo_description String?
  sizes           String[]
  discount        Int?
  price           Float    @default(0)
  hide            Boolean  @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  images     Image[]
  tags       Tag[]
  reviews    Review[]
  delivery   DeliveryType[]
  history    ProductOrder[]
  category   Category?      @relation(fields: [categoryId], references: [id])
  categoryId String?
}

model Review {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  text      String
  rate      Int
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  product   Product  @relation(fields: [productId], references: [id])
  productId String
}

model ProductOrder {
  id        String  @id @default(cuid())
  price     Float
  amount    Int     @default(1)
  product   Product @relation(fields: [productId], references: [id])
  productId String
  order     Order   @relation(fields: [orderId], references: [id])
  orderId   String
}

model Order {
  id             String         @id @default(cuid())
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  user           User           @relation(fields: [userId], references: [id])
  userId         String
  summary        Float
  status         Status         @relation(fields: [statusId], references: [id])
  statusId       String
  products       ProductOrder[]
  delivery       DeliveryType   @relation(fields: [deliveryTypeId], references: [id])
  deliveryTypeId String
}
